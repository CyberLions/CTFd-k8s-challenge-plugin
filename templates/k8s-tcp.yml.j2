apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ deployment_name }}
  namespace: {{ challenge_namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ deployment_name }}
  template:
    metadata:
      labels:
        app: {{ deployment_name }}
    spec:
      containers:
      - name: {{ deployment_name }}
        image: {{ container_name }}
        imagePullPolicy: Always
        ports:
        - name: chal-port
          containerPort: {{ challenge_port }}
          protocol: TCP
        resources:
          limits:
            memory: "50Mi"
            cpu: "25m"
      imagePullSecrets:
        - name: {{ deployment_name }}-pull
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ deployment_name }}-pull
  namespace: {{ challenge_namespace }}
data:
  .dockerconfigjson: {{ registry_data }}
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
kind: Service
metadata:
  name: {{ deployment_name }}-service
  namespace: {{ challenge_namespace }}
spec:
  selector:
    app: {{ deployment_name }}
  ports:
    - name: chal-port
      protocol: TCP
      port: {{ challenge_port }}
      targetPort: {{ challenge_port }}
---
# Using nginx-ingress instead of Istio for TCP challenges
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ deployment_name }}-tcp-ingress
  namespace: {{ challenge_namespace }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "TCP"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: {{ deployment_name }}.{{ tcp_domain_name }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ deployment_name }}-service
            port:
              number: {{ challenge_port }}